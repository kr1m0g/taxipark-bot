import logging
import os
import gspread
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackContext,
    CallbackQueryHandler, MessageHandler, filters, ConversationHandler
)
from google.oauth2.service_account import Credentials
from datetime import datetime

# –õ–æ–≥–∏
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Google Sheets
SCOPES = ["https://www.googleapis.com/auth/spreadsheets"]
SPREADSHEET_ID = os.getenv("SPREADSHEET_ID")
SERVICE_ACCOUNT_FILE = "credentials.json"

# –°–æ—Å—Ç–æ—è–Ω–∏—è
WAITING_PHOTO1, WAITING_PHOTO2, WAITING_CAR_NUMBER, WAITING_REG_CAR = range(4)
user_data_storage = {}

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ
def load_vehicle_data():
    creds = Credentials.from_service_account_file(SERVICE_ACCOUNT_FILE, scopes=SCOPES)
    client = gspread.authorize(creds)
    sheet = client.open_by_key(SPREADSHEET_ID)
    worksheet = sheet.worksheet("Vehicles")
    return worksheet.get_all_records()

# –ó–∞–ø–∏—Å—å –æ—Å–º–æ—Ç—Ä–∞
def append_inspection(data):
    creds = Credentials.from_service_account_file(SERVICE_ACCOUNT_FILE, scopes=SCOPES)
    client = gspread.authorize(creds)
    sheet = client.open_by_key(SPREADSHEET_ID)
    worksheet = sheet.worksheet("Inspections")
    worksheet.append_row(data)

# –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è
def save_vehicle_record(car_number, telegram_id, username):
    creds = Credentials.from_service_account_file(SERVICE_ACCOUNT_FILE, scopes=SCOPES)
    client = gspread.authorize(creds)
    sheet = client.open_by_key(SPREADSHEET_ID)
    worksheet = sheet.worksheet("Vehicles")

    existing = worksheet.get_all_records()
    for row in existing:
        if str(row.get("Telegram ID", "")).strip() == str(telegram_id):
            return  # –£–∂–µ –µ—Å—Ç—å

    contact = f"@{username}" if username else str(telegram_id)
    worksheet.append_row([car_number, contact, telegram_id])

# –°—Ç–∞—Ä—Ç: —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
async def start(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    user_data_storage[chat_id] = {}
    await update.message.reply_text("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:")
    return WAITING_REG_CAR

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
async def handle_registration_car(update: Update, context: CallbackContext):
    car_number = update.message.text.strip().upper()
    telegram_id = update.effective_user.id
    username = update.effective_user.username

    try:
        save_vehicle_record(car_number, telegram_id, username)
        await update.message.reply_text(f"‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã —Å –∞–≤—Ç–æ {car_number}. –û–∂–∏–¥–∞–π—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –æ—Å–º–æ—Ç—Ä–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    return ConversationHandler.END

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ 1
async def handle_photo1(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    if not update.message.photo:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.")
        return WAITING_PHOTO1

    file_id = update.message.photo[-1].file_id
    user_data_storage[chat_id] = {"photo1": file_id}
    await update.message.reply_text("‚úÖ –§–æ—Ç–æ 1 –ø–æ–ª—É—á–µ–Ω–æ. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ç–æ—Ä–æ–µ —Ñ–æ—Ç–æ.")
    return WAITING_PHOTO2

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ 2
async def handle_photo2(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    if not update.message.photo:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ç–æ—Ä—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.")
        return WAITING_PHOTO2

    file_id = update.message.photo[-1].file_id
    user_data_storage[chat_id]["photo2"] = file_id
    await update.message.reply_text("‚úÖ –§–æ—Ç–æ 2 –ø–æ–ª—É—á–µ–Ω–æ. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ê123–ê–ê).")
    return WAITING_CAR_NUMBER

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
async def handle_car_number(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    car_number = update.message.text.strip().upper()
    user_data = user_data_storage.get(chat_id, {})
    photo1 = user_data.get("photo1")
    photo2 = user_data.get("photo2")
    phone = update.effective_user.username or update.effective_user.id

    now = datetime.now()
    row = [
        now.strftime("%d.%m.%Y"),
        now.strftime("%H:%M"),
        car_number,
        str(phone),
        photo1,
        photo2,
        update.effective_user.id
    ]
    try:
        append_inspection(row)
        await update.message.reply_text("‚úÖ –û—Å–º–æ—Ç—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –°–ø–∞—Å–∏–±–æ!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏.")
    return ConversationHandler.END

# –ö–æ–º–∞–Ω–¥–∞ /admin
async def admin_handler(update: Update, context: CallbackContext):
    vehicle_data = load_vehicle_data()
    keyboard = []
    for idx, entry in enumerate(vehicle_data):
        number = entry["–ù–æ–º–µ—Ä –∞–≤—Ç–æ"]
        keyboard.append([InlineKeyboardButton(f"üöò {number}", callback_data=f"car_{idx}")])
    keyboard.append([InlineKeyboardButton("üì§ –†–∞–∑–æ—Å–ª–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data="send_notify")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
selected_indices = set()

async def button_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    if query.data.startswith("car_"):
        idx = int(query.data.split("_")[1])
        if idx in selected_indices:
            selected_indices.remove(idx)
        else:
            selected_indices.add(idx)

        selected = ", ".join(str(i + 1) for i in selected_indices)
        await query.edit_message_text(
            f"‚úÖ –í—ã–±—Ä–∞–Ω—ã –∞–≤—Ç–æ: {selected}\n–ù–∞–∂–º–∏—Ç–µ üì§ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.",
            reply_markup=query.message.reply_markup
        )

    elif query.data == "send_notify":
        vehicle_data = load_vehicle_data()
        sent = 0
        for idx in selected_indices:
            try:
                entry = vehicle_data[idx]
                contact = entry["–¢–µ–ª–µ—Ñ–æ–Ω –≤–æ–¥–∏—Ç–µ–ª—è"].strip()
                message_text = "üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ 2 —Ñ–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ."

                if contact.startswith("@"):
                    await context.bot.send_message(chat_id=contact, text=message_text)
                    sent += 1
                else:
                    await context.bot.send_message(chat_id=int(contact), text=message_text)
                    sent += 1

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ [{contact}]: {e}")

        await query.edit_message_text(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: {sent} –≤–æ–¥–∏—Ç–µ–ª—è–º.")
        selected_indices.clear()

# –ó–∞–ø—É—Å–∫
def main():
    app = ApplicationBuilder().token(os.getenv("BOT_TOKEN")).build()

    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("start", start),
            MessageHandler(filters.PHOTO, handle_photo1),
        ],
        states={
            WAITING_REG_CAR: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_registration_car)],
            WAITING_PHOTO2: [MessageHandler(filters.PHOTO, handle_photo2)],
            WAITING_CAR_NUMBER: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_car_number)],
        },
        fallbacks=[],
    )

    app.add_handler(conv_handler)
    app.add_handler(CommandHandler("admin", admin_handler))
    app.add_handler(CallbackQueryHandler(button_handler))

    app.run_polling()

if __name__ == "__main__":
    main()
