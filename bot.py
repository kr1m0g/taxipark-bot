import logging
import os
import re
import gspread
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackContext,
    CallbackQueryHandler, MessageHandler, filters, ConversationHandler
)
from google.oauth2.service_account import Credentials
from datetime import datetime

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Google Sheets
SCOPES = ["https://www.googleapis.com/auth/spreadsheets"]
SPREADSHEET_ID = os.getenv("SPREADSHEET_ID")
SERVICE_ACCOUNT_FILE = "credentials.json"

# –¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–∞–±–ª–∏—Ü–µ
try:
    creds = Credentials.from_service_account_file(SERVICE_ACCOUNT_FILE, scopes=SCOPES)
    client = gspread.authorize(creds)
    sheet = client.open_by_key(SPREADSHEET_ID)
    logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ –Ω–∞–π–¥–µ–Ω–∞: %s", sheet.title)
except Exception as e:
    logger.error("‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ: %s", e)

def load_vehicle_data():
    creds = Credentials.from_service_account_file(SERVICE_ACCOUNT_FILE, scopes=SCOPES)
    client = gspread.authorize(creds)
    sheet = client.open_by_key(SPREADSHEET_ID)
    return sheet.worksheet("Vehicles").get_all_records()

def append_inspection(data):
    creds = Credentials.from_service_account_file(SERVICE_ACCOUNT_FILE, scopes=SCOPES)
    client = gspread.authorize(creds)
    sheet = client.open_by_key(SPREADSHEET_ID)
    sheet.worksheet("Inspections").append_row(data)

def append_user_to_vehicles(car_number, user_id, username):
    creds = Credentials.from_service_account_file(SERVICE_ACCOUNT_FILE, scopes=SCOPES)
    client = gspread.authorize(creds)
    sheet = client.open_by_key(SPREADSHEET_ID)
    worksheet = sheet.worksheet("Vehicles")
    all_values = worksheet.get_all_values()
    for i, row in enumerate(all_values[1:], start=2):
        existing_car = row[0].strip().upper() if len(row) > 0 else ""
        existing_id = row[1].strip() if len(row) > 1 else ""
        if existing_car == car_number:
            if existing_id:
                raise ValueError("–≠—Ç–æ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –¥—Ä—É–≥–∏–º –≤–æ–¥–∏—Ç–µ–ª–µ–º.")
            worksheet.update_cell(i, 2, str(user_id))
            worksheet.update_cell(i, 3, username or "")
            return
    worksheet.append_row([car_number, str(user_id), username or ""])

# –ß–∏—Å–ª–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
WAITING_CAR_SEARCH, WAITING_CAR_CHOICE, WAITING_PHOTO1, WAITING_PHOTO2, WAITING_CAR_NUMBER = range(5)

user_data_storage = {}
selected_indices = set()

# ID –∞–¥–º–∏–Ω–∞
ADMIN_ID = 6350035236

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start_handler(update: Update, context: CallbackContext):
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 2 —Ü–∏—Ñ—Ä—ã –∏–∑ –Ω–æ–º–µ—Ä–∞ –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ:")
    return WAITING_CAR_SEARCH

# –ü–æ–∏—Å–∫ –∞–≤—Ç–æ –ø–æ —Ü–∏—Ñ—Ä–∞–º
async def search_car_number(update: Update, context: CallbackContext):
    partial = re.sub(r"\D", "", update.message.text.strip())
    if len(partial) < 2:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã 2 —Ü–∏—Ñ—Ä—ã.")
        return WAITING_CAR_SEARCH
    matches = [v for v in load_vehicle_data()
               if partial in re.sub(r"\D", "", v["–ù–æ–º–µ—Ä –∞–≤—Ç–æ"])]
    if not matches:
        await update.message.reply_text("üö´ –ù–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return WAITING_CAR_SEARCH
    keyboard = [[InlineKeyboardButton(v["–ù–æ–º–µ—Ä –∞–≤—Ç–æ"], callback_data=f"choose_{v['–ù–æ–º–µ—Ä –∞–≤—Ç–æ']}")]
                for v in matches]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ:", reply_markup=InlineKeyboardMarkup(keyboard))
    return WAITING_CAR_CHOICE

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –∞–≤—Ç–æ
async def choose_car_button(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    car = query.data.replace("choose_", "")
    try:
        append_user_to_vehicles(car, query.from_user.id, query.from_user.username)
        await query.edit_message_text(f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: {car}. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é —Ñ–æ—Ç–∫—É.")
        return WAITING_PHOTO1
    except ValueError as ve:
        await query.edit_message_text(f"üö´ {ve}")
        return ConversationHandler.END
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: %s", e)
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return ConversationHandler.END

# –§–æ—Ç–æ1
async def handle_photo1(update: Update, context: CallbackContext):
    if not update.message.photo:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ñ–æ—Ç–æ.")
        return WAITING_PHOTO1
    user_data_storage[update.effective_chat.id] = {"photo1": update.message.photo[-1].file_id}
    await update.message.reply_text("‚úÖ –§–æ—Ç–æ 1 ‚Äî –æ—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ 2.")
    return WAITING_PHOTO2

# –§–æ—Ç–æ2
async def handle_photo2(update: Update, context: CallbackContext):
    if not update.message.photo:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ñ–æ—Ç–æ.")
        return WAITING_PHOTO2
    chat = update.effective_chat.id
    user_data_storage[chat]["photo2"] = update.message.photo[-1].file_id
    await update.message.reply_text("‚úÖ –§–æ—Ç–æ 2 ‚Äî –æ—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ —Å–Ω–æ–≤–∞.")
    return WAITING_CAR_NUMBER

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
async def handle_car_number(update: Update, context: CallbackContext):
    chat = update.effective_chat.id
    data = user_data_storage.get(chat, {})
    row = [
        datetime.now().strftime("%d.%m.%Y"),
        datetime.now().strftime("%H:%M"),
        update.message.text.strip().upper(),
        update.effective_user.username or "",
        data.get("photo1"),
        data.get("photo2"),
        update.effective_user.id
    ]
    try:
        append_inspection(row)
        await update.message.reply_text("‚úÖ –í—Å—ë —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –°–ø–∞—Å–∏–±–æ!")
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏:", e)
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏.")
    return ConversationHandler.END

# –ö–æ–º–∞–Ω–¥–∞ /admin
async def admin_handler(update: Update, context: CallbackContext):
    if update.effective_user.id != ADMIN_ID:
        return  # –Ω–µ –∞–¥–º–∏–Ω ‚Äî –Ω–µ —Ä–µ–∞–≥–∏—Ä—É–µ–º
    selected_indices.clear()
    await send_admin_keyboard(update.message, context)

# –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∞–¥–º–∏–Ω–∞
async def send_admin_keyboard(message_or_query, context: CallbackContext):
    data = load_vehicle_data()
    keyboard = [[InlineKeyboardButton( ("‚úÖ" if i in selected_indices else "‚óªÔ∏è") + " " + v["–ù–æ–º–µ—Ä –∞–≤—Ç–æ"],
                                      callback_data=f"car_{i}")]
                for i, v in enumerate(data)]
    if selected_indices:
        keyboard.append([InlineKeyboardButton("üì§ –†–∞–∑–æ—Å–ª–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data="send_notify")])
    markup = InlineKeyboardMarkup(keyboard)
    if hasattr(message_or_query, "reply_text"):
        await message_or_query.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—à–∏–Ω—ã:", reply_markup=markup)
    else:
        await message_or_query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—à–∏–Ω—ã:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ admin-–∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    if query.from_user.id != ADMIN_ID:
        return
    data = load_vehicle_data()
    if query.data.startswith("car_"):
        idx = int(query.data.split("_")[1])
        if idx in selected_indices:
            selected_indices.remove(idx)
        else:
            selected_indices.add(idx)
        await send_admin_keyboard(query, context)
    elif query.data == "send_notify":
        for idx in selected_indices:
            entry = data[idx]
            uid = entry.get("ID (user_id)")
            if uid:
                try:
                    await context.bot.send_message(chat_id=int(uid),
                                                   text=f"üì∏ –ê–¥–º–∏–Ω –ø—Ä–æ—Å–∏—Ç: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 2 —Ñ–æ—Ç–æ –∏ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ ({entry['–ù–æ–º–µ—Ä –∞–≤—Ç–æ']}).")
                except Exception as e:
                    logger.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ %s ‚Üí %s: %s", entry['–ù–æ–º–µ—Ä –∞–≤—Ç–æ'], uid, e)
        selected_indices.clear()
        await query.edit_message_text("‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")

def main():
    app = ApplicationBuilder().token(os.getenv("BOT_TOKEN")).build()
    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start_handler)],
        states={
            WAITING_CAR_SEARCH: [MessageHandler(filters.TEXT & ~filters.COMMAND, search_car_number)],
            WAITING_CAR_CHOICE: [CallbackQueryHandler(choose_car_button, pattern="^choose_")],
            WAITING_PHOTO1: [MessageHandler(filters.PHOTO, handle_photo1)],
            WAITING_PHOTO2: [MessageHandler(filters.PHOTO, handle_photo2)],
            WAITING_CAR_NUMBER: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_car_number)],
        },
        fallbacks=[]
    )
    app.add_handler(conv)
    app.add_handler(CommandHandler("admin", admin_handler))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.run_webhook(listen="0.0.0.0", port=int(os.getenv("PORT", 8443)), webhook_url=os.getenv("WEBHOOK_URL"))

if __name__ == "__main__":
    main()
