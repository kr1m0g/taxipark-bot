import os
import logging
import re
from datetime import datetime

import gspread
from google.oauth2.service_account import Credentials
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    BotCommand
)
from telegram.ext import (
    ApplicationBuilder,
    CallbackContext,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ConversationHandler,
    filters,
)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
SCOPES = ["https://www.googleapis.com/auth/spreadsheets"]
SPREADSHEET_ID = os.getenv("SPREADSHEET_ID")
SERVICE_ACCOUNT_FILE = "credentials.json"

# –°–æ—Å—Ç–æ—è–Ω–∏—è
WAITING_CAR_SEARCH, WAITING_CAR_CHOICE, WAITING_PHOTO1, WAITING_PHOTO2, WAITING_CAR_NUMBER = range(5)
user_data_storage = {}
user_change_request = set()  # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–∂–∞–ª–∏ "–°–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ"

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
main_menu_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        ["üöó –í—ã–±—Ä–∞—Ç—å –∞–≤—Ç–æ", "üîÑ –°–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ"],
        ["üì∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ"]
    ],
    resize_keyboard=True
)

# Google Sheets
def load_vehicle_data():
    creds = Credentials.from_service_account_file(SERVICE_ACCOUNT_FILE, scopes=SCOPES)
    client = gspread.authorize(creds)
    sheet = client.open_by_key(SPREADSHEET_ID)
    return sheet.worksheet("Vehicles").get_all_records()

def append_inspection(data):
    creds = Credentials.from_service_account_file(SERVICE_ACCOUNT_FILE, scopes=SCOPES)
    client = gspread.authorize(creds)
    sheet = client.open_by_key(SPREADSHEET_ID)
    sheet.worksheet("Inspections").append_row(data)

def append_user_to_vehicles(car_number, user_id, username):
    creds = Credentials.from_service_account_file(SERVICE_ACCOUNT_FILE, scopes=SCOPES)
    client = gspread.authorize(creds)
    worksheet = client.open_by_key(SPREADSHEET_ID).worksheet("Vehicles")
    all_values = worksheet.get_all_values()

    for i, row in enumerate(all_values[1:], start=2):
        existing_car = row[0].strip().upper() if len(row) > 0 else ""
        existing_id = row[1].strip() if len(row) > 1 else ""

        if existing_car == car_number:
            if existing_id:
                raise ValueError("–≠—Ç–æ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –¥—Ä—É–≥–∏–º –≤–æ–¥–∏—Ç–µ–ª–µ–º.")
            else:
                worksheet.update_cell(i, 2, str(user_id))
                worksheet.update_cell(i, 3, username or "")
                return
    worksheet.append_row([car_number, str(user_id), username or ""])

def remove_user_from_vehicles(user_id):
    creds = Credentials.from_service_account_file(SERVICE_ACCOUNT_FILE, scopes=SCOPES)
    client = gspread.authorize(creds)
    worksheet = client.open_by_key(SPREADSHEET_ID).worksheet("Vehicles")
    all_values = worksheet.get_all_values()

    for i, row in enumerate(all_values[1:], start=2):
        if len(row) >= 2 and row[1] == str(user_id):
            worksheet.update_cell(i, 2, "")
            worksheet.update_cell(i, 3, "")
            break

# –°—Ç–∞—Ä—Ç
async def start_handler(update: Update, context: CallbackContext):
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu_keyboard
    )
    return WAITING_CAR_SEARCH

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é
async def handle_menu_command(update: Update, context: CallbackContext):
    text = update.message.text.strip()
    user_id = update.effective_user.id

    if text == "üöó –í—ã–±—Ä–∞—Ç—å –∞–≤—Ç–æ":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ 3 —Ü–∏—Ñ—Ä—ã –∏–∑ –Ω–æ–º–µ—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 333):")
        return WAITING_CAR_SEARCH

    elif text == "üîÑ –°–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ":
        user_change_request.add(user_id)
        await update.message.reply_text("üîÑ –í–∞—à–∞ —Ç–µ–∫—É—â–∞—è –ø—Ä–∏–≤—è–∑–∫–∞ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞.\n–í–≤–µ–¥–∏—Ç–µ 3 —Ü–∏—Ñ—Ä—ã –∏–∑ –Ω–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:")
        return WAITING_CAR_SEARCH

    elif text == "üì∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ":
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ.")
        return WAITING_PHOTO1

    else:
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.")
        return WAITING_CAR_SEARCH

# –ü–æ–∏—Å–∫ –∞–≤—Ç–æ –ø–æ 3 —Ü–∏—Ñ—Ä–∞–º
async def search_car_number(update: Update, context: CallbackContext):
    user_id = update.effective_user.id

    if user_id in user_change_request:
        remove_user_from_vehicles(user_id)
        user_change_request.remove(user_id)

    partial_digits = re.sub(r"\D", "", update.message.text.strip())

    if len(partial_digits) != 3:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ä–æ–≤–Ω–æ 3 —Ü–∏—Ñ—Ä—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: 333")
        return WAITING_CAR_SEARCH

    vehicle_data = load_vehicle_data()
    matches = []

    for v in vehicle_data:
        car_number = v["–ù–æ–º–µ—Ä –∞–≤—Ç–æ"]
        match_digits = re.findall(r"^[–ê-–ØA-Z]{1}(\d{3})", car_number)
        if match_digits and match_digits[0] == partial_digits:
            matches.append(v)

    if not matches:
        await update.message.reply_text("üö´ –ú–∞—à–∏–Ω—ã —Å —Ç–∞–∫–∏–º–∏ —Ü–∏—Ñ—Ä–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return WAITING_CAR_SEARCH

    keyboard = [
        [InlineKeyboardButton(v["–ù–æ–º–µ—Ä –∞–≤—Ç–æ"], callback_data=f"choose_{v['–ù–æ–º–µ—Ä –∞–≤—Ç–æ']}")]
        for v in matches
    ]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∞–≤—Ç–æ–º–æ–±–∏–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return WAITING_CAR_CHOICE

# –í—ã–±–æ—Ä –º–∞—à–∏–Ω—ã
async def choose_car_button(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    car_number = query.data.replace("choose_", "")
    user_id = query.from_user.id
    username = query.from_user.username

    try:
        append_user_to_vehicles(car_number, user_id, username)
        await query.edit_message_text(f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: {car_number}\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ.")
        return WAITING_PHOTO1

    except ValueError:
        await query.edit_message_text("üö´ –≠—Ç–æ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—å —É–∂–µ –∑–∞–Ω—è—Ç.\n–ù–∞–∂–º–∏—Ç–µ 'üöó –í—ã–±—Ä–∞—Ç—å –∞–≤—Ç–æ' –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return WAITING_CAR_SEARCH

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return ConversationHandler.END

# –§–æ—Ç–æ 1
async def handle_photo1(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    if not update.message.photo:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.")
        return WAITING_PHOTO1
    user_data_storage[chat_id] = {"photo1": update.message.photo[-1].file_id}
    await update.message.reply_text("‚úÖ –§–æ—Ç–æ 1 –ø–æ–ª—É—á–µ–Ω–æ. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ç–æ—Ä–æ–µ.")
    return WAITING_PHOTO2

# –§–æ—Ç–æ 2
async def handle_photo2(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    if not update.message.photo:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.")
        return WAITING_PHOTO2
    user_data_storage[chat_id]["photo2"] = update.message.photo[-1].file_id
    await update.message.reply_text("‚úÖ –§–æ—Ç–æ 2 –ø–æ–ª—É—á–µ–Ω–æ. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ê333–ê–ù797).")
    return WAITING_CAR_NUMBER

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
async def handle_car_number(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    car_number = update.message.text.strip().upper()
    user_data = user_data_storage.get(chat_id, {})
    now = datetime.now()
    row = [
        now.strftime("%d.%m.%Y"),
        now.strftime("%H:%M"),
        car_number,
        update.effective_user.username or "",
        user_data.get("photo1"),
        user_data.get("photo2"),
        update.effective_user.id
    ]
    try:
        append_inspection(row)
        await update.message.reply_text("‚úÖ –í—Å—ë —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –°–ø–∞—Å–∏–±–æ!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏.")
    return ConversationHandler.END

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥
async def set_bot_commands(app):
    await app.bot.set_my_commands([
        BotCommand("start", "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É")
    ])

# –ó–∞–ø—É—Å–∫
# ... [–≤–µ—Å—å –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Å—Ç–∞—ë—Ç—Å—è –∫–∞–∫ –±—ã–ª] ...

# === –ó–∞–ø—É—Å–∫ ===
def main():
    app = ApplicationBuilder().token(os.getenv("BOT_TOKEN")).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start_handler)],
        states={
            WAITING_CAR_SEARCH: [
                MessageHandler(filters.Regex(r"^\d{3}$"), search_car_number),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_menu_command)
            ],
            WAITING_CAR_CHOICE: [
                CallbackQueryHandler(choose_car_button, pattern=r"^choose_")
            ],
            WAITING_PHOTO1: [MessageHandler(filters.PHOTO, handle_photo1)],
            WAITING_PHOTO2: [MessageHandler(filters.PHOTO, handle_photo2)],
            WAITING_CAR_NUMBER: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_car_number)],
        },
        fallbacks=[],
    )

    # –î–æ–±–∞–≤–ª—è–µ–º ConversationHandler
    app.add_handler(conv_handler)

    # ‚úÖ –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é ‚Äî —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ª—é–±–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    app.add_handler(MessageHandler(
        filters.TEXT & filters.Regex(r"^(üöó –í—ã–±—Ä–∞—Ç—å –∞–≤—Ç–æ|üîÑ –°–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ|üì∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ)$"),
        handle_menu_command
    ))

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
    app.post_init = set_bot_commands

    # –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ –≤–µ–±—Ö—É–∫
    app.run_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get("PORT", 8443)),
        webhook_url=os.getenv("WEBHOOK_URL")
    )

if __name__ == "__main__":
    main()
