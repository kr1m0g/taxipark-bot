import os
import logging
import json
import gspread
from dotenv import load_dotenv
from oauth2client.service_account import ServiceAccountCredentials
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler,
    filters, ContextTypes
)

load_dotenv()
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.getenv("BOT_TOKEN")
SPREADSHEET_ID = os.getenv("SPREADSHEET_ID")

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("creds.json", scope)
client = gspread.authorize(creds)

sheet = client.open_by_key(SPREADSHEET_ID)
car_sheet = sheet.worksheet("Cars")
inspection_sheet = sheet.worksheet("Inspections")

data = car_sheet.get_all_records()


# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Ç–∞–∫—Å–æ–ø–∞—Ä–∫–∞.")


# –ö–æ–º–∞–Ω–¥–∞ /notify ‚Äî —Ä–∞—Å—Å—ã–ª–∫–∞
async def notify(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton(f"{row['–ì–æ—Å–Ω–æ–º–µ—Ä']}", callback_data=json.dumps([row["–ì–æ—Å–Ω–æ–º–µ—Ä"]]))]
        for row in data
    ]
    markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    selected_values = json.loads(query.data)
    selected_rows = [row for row in data if str(row.get("–ì–æ—Å–Ω–æ–º–µ—Ä")) in selected_values]

    success = 0
    failed = 0

    for entry in selected_rows:
        try:
            contact = str(entry["–¢–µ–ª–µ—Ñ–æ–Ω –≤–æ–¥–∏—Ç–µ–ª—è"]).strip()
            car_number = str(entry["–ì–æ—Å–Ω–æ–º–µ—Ä"]).strip()
            message_text = f"üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 2 —Ñ–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è {car_number} (–≤–Ω—É—Ç—Ä–∏ –∏ —Å–Ω–∞—Ä—É–∂–∏)."

            await context.bot.send_message(chat_id=contact, text=message_text)
            logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ [{contact}] –¥–ª—è –º–∞—à–∏–Ω—ã {car_number}")
            success += 1
        except Exception as e:
            contact_info = str(entry.get("–¢–µ–ª–µ—Ñ–æ–Ω –≤–æ–¥–∏—Ç–µ–ª—è", "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"))
            car_number = str(entry.get("–ì–æ—Å–Ω–æ–º–µ—Ä", "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"))
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ [{contact_info}] –¥–ª—è –º–∞—à–∏–Ω—ã {car_number}: {e}")
            failed += 1

    await query.edit_message_text(
        text=f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n‚úÖ –£—Å–ø–µ—à–Ω–æ: {success}\n‚ùå –û—à–∏–±–∫–∏: {failed}"
    )


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ –æ—Ç –≤–æ–¥–∏—Ç–µ–ª—è
user_photos = {}

async def photo_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.chat_id
    photo_file_id = update.message.photo[-1].file_id

    if user_id not in user_photos:
        user_photos[user_id] = []

    user_photos[user_id].append(photo_file_id)

    if len(user_photos[user_id]) == 1:
        await update.message.reply_text("‚úÖ –§–æ—Ç–æ 1 –ø–æ–ª—É—á–µ–Ω–æ. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ç–æ—Ä–æ–µ —Ñ–æ—Ç–æ.")
    elif len(user_photos[user_id]) == 2:
        await update.message.reply_text("‚úÖ –û–±–∞ —Ñ–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω—ã. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–≥–æ—Å–Ω–æ–º–µ—Ä).")


# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –∞–≤—Ç–æ –ø–æ—Å–ª–µ –¥–≤—É—Ö —Ñ–æ—Ç–æ
async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.chat_id
    if user_id in user_photos and len(user_photos[user_id]) == 2:
        car_number = update.message.text.strip()
        row = [car_number, user_id, user_photos[user_id][0], user_photos[user_id][1]]
        inspection_sheet.append_row(row)
        await update.message.reply_text("‚úÖ –°–ø–∞—Å–∏–±–æ! –§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
        user_photos.pop(user_id)
    else:
        await update.message.reply_text("üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 2 —Ñ–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.")


# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
if __name__ == "__main__":
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("notify", notify))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.PHOTO, photo_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))

    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    app.run_polling()
